
root = exports ? this

#---------------------------------------------------
Network = () ->
  # variables we want to access
  # in multiple places of Network
  width = 1280
  height = 980
  # allData will store the unfiltered data
  allData = []
  curLinksData = []
  curNodesData = []
  linkedByIndex = {}
  # these will hold the svg groups for
  # accessing the nodes and links display
  nodesG = null
  linksG = null
  # these will point to the circles and lines
  # of the nodes and links
  node = null
  link = null
  # variables to refect the current settings
  # of the visualization
  layout = "force"

  # our force directed layout
  force = d3.layout.force()
  # color function used to color nodes
  nodeColors = d3.scale.category20()
  # tooltip used to display details
#ep  tooltip = Tooltip("vis-tooltip", 230)

  # charge used in artist layout
#  charge = (node) -> -Math.pow(node.radius, 2.0) / 2
  charge = (node) -> -150
  linkDistance = (node) -> 20
##            .size([width, height]);

  # Starting point for network visualization
  # Initializes visualization and starts force layout
  network = (selection, data) ->
    # format our data
    allData = setupData(data)

    # create our svg and groups
    vis = d3.select(selection).append("svg")
      .attr("width", width)
      .attr("height", height)
    linksG = vis.append("g").attr("id", "links")
    nodesG = vis.append("g").attr("id", "nodes")
    
    tst = vis.append("h1").text("test")

    # setup the size of the force environment
    force.size([width, height])

    setLayout("force")

    # perform rendering and start force layout
    update()
#------------------------------------------------------------
  # The update() function performs the bulk of the
  # work to setup our visualization based on the
  # current layout/sort/filter.
  #
  # update() is called everytime a parameter changes
  # and the network needs to be reset.
  update = () ->

    # reset nodes in force layout
    force.nodes(curNodesData)

    # enter / exit for nodes
    updateNodes()

    # always show links in force layout
    if layout == "force"
      force.links(curLinksData)
      updateLinks()
    else
      # reset links so they do not interfere with
      # other layouts. updateLinks() will be called when
      # force is done animating.
      force.links([])
      # if present, remove them from svg 
      if link
        link.data([]).exit().remove()
        link = null

    # start me up!
    force.start()


  network.updateData = (newData) ->
    allData = setupData(newData)
    link.remove()
    node.remove()
    update()

  # called once to clean up raw data and switch links to
  # point to node instances
  # Returns modified data
  setupData = (data) ->

    data.nodes.forEach (n) ->
      # set initial x/y to values within the width/height
      # of the visualization
      n.x = randomnumber=Math.floor(Math.random()*width)
      n.y = randomnumber=Math.floor(Math.random()*height)
      # add radius to the node so we can use it later
      n.radius = circleRadius(n.value)

    # id's -> node objects
    nodesMap  = mapNodes(data.nodes)

    # switch links to point to node objects instead of id's
#    data.links.forEach (l) ->
#      l.source = nodesMap.get(l.source)
#      l.target = nodesMap.get(l.target)

    data

  # Helper function to map node id's to node objects.
  # Returns d3.map of ids -> nodes
  mapNodes = (nodes) ->
    nodesMap = d3.map()
    nodes.forEach (n) ->
      nodesMap.set(n.id, n)
    nodesMap


  updateCenters = (artists) ->
    if layout == "radial"
      groupCenters = RadialPlacement().center({"x":width/2, "y":height / 2 - 100})
        .radius(300).increment(18).keys(artists)

  # enter/exit display for nodes
#        var node = svg.selectAll(".node")
#                    .data(graph.nodes)
#                    .enter().append("circle")
#                    .attr("class", "node")
#                    .attr("r", function(d) { return Math.sqrt(d.send/2); })
#                    .style("fill", function(d) { return color(d.Direction); })
#                    .call(force.drag);

  updateNodes = () ->
    node = nodesG.selectAll("graph.nodes")
      .data(curNodesData, (d) -> d.group)

    node.enter().append("graph")
      .attr("class", "node")
      .attr("cx", (d) -> d.x)
      .attr("cy", (d) -> d.y)
      .attr("r", (d) -> d.radius)
      .style("fill", (d) -> nodeColors(d.artist))
      .style("stroke", (d) -> strokeFor(d))
      .style("stroke-width", 1.0)

    node.on("mouseover", showDetails)
      .on("mouseout", hideDetails)

    node.exit().remove()

  # enter/exit display for links
  updateLinks = () ->
    link = linksG.selectAll("line.link")
      .data(curLinksData, (d) -> "#{d.source.id}_#{d.target.id}")
    link.enter().append("line")
      .attr("class", "link")
      .attr("stroke", "#ddd")
      .attr("stroke-opacity", 0.8)
      .attr("x1", (d) -> d.source.x)
      .attr("y1", (d) -> d.source.y)
      .attr("x2", (d) -> d.target.x)
      .attr("y2", (d) -> d.target.y)

    link.exit().remove()

  # switches force to new layout parameters
  setLayout = (newLayout) ->
    layout = newLayout
    force.on("tick", forceTick)
        .charge(-200)
        .linkDistance(50)

  # tick function for force directed layout
  forceTick = (e) ->
    node
      .attr("cx", (d) -> d.x)
      .attr("cy", (d) -> d.y)

    link
      .attr("x1", (d) -> d.source.x)
      .attr("y1", (d) -> d.source.y)
      .attr("x2", (d) -> d.target.x)
      .attr("y2", (d) -> d.target.y)

  # tick function for radial layout
  radialTick = (e) ->
    node.each(moveToRadialLayout(e.alpha))

    node
      .attr("cx", (d) -> d.x)
      .attr("cy", (d) -> d.y)

    if e.alpha < 0.03
      force.stop()
      updateLinks()

  # Adjusts x/y for each node to
  # push them towards appropriate location.
  # Uses alpha to dampen effect over time.
  moveToRadialLayout = (alpha) ->
    k = alpha * 0.1
    (d) ->
      centerNode = groupCenters(d.artist)
      d.x += (centerNode.x - d.x) * k
      d.y += (centerNode.y - d.y) * k


  # Helper function that returns stroke color for
  # particular node.
  strokeFor = (d) ->
    d3.rgb(nodeColors(d.artist)).darker().toString()


  # Final act of Network() function is to return the inner 'network()' function.
  return network

# Activate selector button
activate = (group, link) ->
  d3.selectAll("##{group} a").classed("active", false)
  d3.select("##{group} ##{link}").classed("active", true)

$ ->

  myNetwork = Network()

#  d3.selectAll("#layouts a").on "click", (d) ->
#    newLayout = d3.select(this).attr("group")
#    activate("layouts", newLayout)
#    myNetwork.toggleLayout(newLayout)

#  d3.selectAll("#filters a").on "click", (d) ->
#    newFilter = d3.select(this).attr("id")
#    activate("filters", newFilter)
#    myNetwork.toggleFilter(newFilter)

#  d3.selectAll("#sorts a").on "click", (d) ->
#    newSort = d3.select(this).attr("id")
#    activate("sorts", newSort)
#    myNetwork.toggleSort(newSort)

  $("#mois_select").on "change", (e) ->
    moisFile = $(this).val()
    d3.json "#{moisFile}", (json) ->
      myNetwork.updateData(json)
  
#  $("#search").keyup () ->
#    searchTerm = $(this).val()
#    myNetwork.updateSearch(searchTerm)

#  d3.json "email-08.json", (json) ->
#    myNetwork("#vis", json)